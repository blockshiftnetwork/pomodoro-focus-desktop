name: Release Build

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4

      - name: Get or Create Release
        id: create-release
        run: |
          # Check if release exists
          RELEASE_DATA=$(gh release view "${{ github.ref_name }}" --json id,uploadUrl 2>/dev/null || echo "")

          if [ -n "$RELEASE_DATA" ]; then
            # Release exists, get its data
            echo "Release already exists, using existing release"
            RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
            UPLOAD_URL=$(echo "$RELEASE_DATA" | jq -r '.uploadUrl')
          else
            # Create new release
            echo "Creating new release"
            gh release create "${{ github.ref_name }}" \
              --title "Pomodoro Focus ${{ github.ref_name }}" \
              --notes "## What's New in ${{ github.ref_name }}

            ### Features
            - List new features here

            ### Bug Fixes
            - List bug fixes here

            ### Downloads
            - **Windows**: Download the \`.msi\` or \`.exe\` installer
            - **Linux**: Download the \`.deb\` package or \`.AppImage\`

            See the assets below for downloads."
            
            RELEASE_DATA=$(gh release view "${{ github.ref_name }}" --json id,uploadUrl)
            RELEASE_ID=$(echo "$RELEASE_DATA" | jq -r '.id')
            UPLOAD_URL=$(echo "$RELEASE_DATA" | jq -r '.uploadUrl')
          fi

          echo "id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: create-release
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install frontend dependencies
        run: bun install

      - name: Build Tauri app
        run: bun run tauri build

      - name: Find and Upload MSI to Release
        run: |
          MSI_FILE=$(find src-tauri/target/release/bundle/msi -name "*.msi" | head -n 1)
          if [ -f "$MSI_FILE" ]; then
            gh release upload "${{ github.ref_name }}" "$MSI_FILE" --clobber
          else
            echo "MSI file not found"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and Upload NSIS installer to Release
        run: |
          NSIS_FILE=$(find src-tauri/target/release/bundle/nsis -name "*-setup.exe" | head -n 1)
          if [ -f "$NSIS_FILE" ]; then
            gh release upload "${{ github.ref_name }}" "$NSIS_FILE" --clobber
          else
            echo "NSIS installer not found, skipping"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  build-linux:
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: bun install

      - name: Build Tauri app
        run: bun run tauri build

      - name: Find and Upload DEB to Release
        run: |
          DEB_FILE=$(find src-tauri/target/release/bundle/deb -name "*.deb" | head -n 1)
          if [ -f "$DEB_FILE" ]; then
            gh release upload "${{ github.ref_name }}" "$DEB_FILE" --clobber
          else
            echo "DEB file not found"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and Upload AppImage to Release
        run: |
          APPIMAGE_FILE=$(find src-tauri/target/release/bundle/appimage -name "*.AppImage" | head -n 1)
          if [ -f "$APPIMAGE_FILE" ]; then
            gh release upload "${{ github.ref_name }}" "$APPIMAGE_FILE" --clobber
          else
            echo "AppImage file not found, skipping"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
